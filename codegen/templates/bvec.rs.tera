{%- if dim %}
	{%- set name = "GBVec" ~ dim %}
	{%- set components = ["x", "y", "z", "w"] | slice(end = dim) %}
{%- else %}
	{%- set name = "GBVec" %}
{%- endif -%}

use std::{
	fmt::{Debug, Display},
	hash::Hash,
	ops::{BitAnd, BitAndAssign, BitOr, BitOrAssign, BitXor, BitXorAssign, Not},
};

pub trait {{ name }}
where
	Self:
		Clone +
		Copy +
		PartialEq +
		Eq +
		Hash +
		Default +
		BitAnd +
		BitAndAssign +
		BitOr +
		BitOrAssign +
		BitXor +
		BitXorAssign +
		Not +
		Debug +
		Display +
		{%- if dim %}
		From<[bool; {{ dim }}]> +
		Into<[bool; {{ dim }}]> +
		Into<[u32; {{ dim }}]> +
		{%- endif %}
	,
{
	const FALSE: Self;
	const TRUE: Self;
	{%- if not dim %}
	const DIM: usize;
	{%- endif %}
	fn splat(v: bool) -> Self;
	fn bitmask(self) -> u32;
	fn any(self) -> bool;
	fn all(self) -> bool;
	fn test(&self, index: usize) -> bool;
	fn set(&mut self, index: usize, value: bool);
	{%- if dim %}
	fn new({% for c in components %}{{ c }}: bool{% if not loop.last %}, {% endif %}{% endfor %}) -> Self;
	fn from_array(a: [bool; {{ dim }}]) -> Self;
	{%- endif %}
}
